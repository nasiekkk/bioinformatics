def computingFrequencies(dna, number):
    freq_arr = [0]*pow(4, number)
    for i in range(len(dna) - number + 1):
        index = find_index(dna[i:i+number])
        freq_arr[index] += 1
    return freq_arr

def find_index(s):
    power = 1
    needed = s[::-1]
    result = 0
    for i in needed:
        result += ("ACGT".index(i)) * power
        power *= 4
    return result

def find_kmer(number):
    conv = []
    while number > 0:
        res = number%4
        number = number//4
        conv.append(res)
    return ["ACGT"[i] for i in conv[::-1]]

def clump_finding(dna, kmer_len, subs_len, amount):
    result = []
    for i in range(len(dna) - subs_len):
        substr = dna[i:i+subs_len]
        freq_arr = computingFrequencies(substr, kmer_len)
        for j in range(len(freq_arr)):
            if freq_arr[j] >= amount:
                a = find_kmer(j)
                if result.count(a) == 0:
                    result.append(a)
    return result

def patternToNumber(pattern):
    if len(pattern) == 0:
        return 0
    symbol = pattern[len(pattern) - 1]
    prefix = pattern[0:len(pattern) - 1]
    return 4*patternToNumber(prefix) + symbolToNumber(symbol)

def symbolToNumber(symbol):
    if symbol == "C":
        return 1
    if symbol == "G":
        return 2
    if symbol == "T":
        return 3
    return 0

def numberToPattern(index, k):
    if k == 1:
        return numberToSymbol(index)
    prefixIndex = index//4
    r = index%4
    symbol = numberToSymbol(r)
    prefixPattern = numberToPattern(prefixIndex, k-1)
    return prefixPattern + symbol

def numberToSymbol(number):
    if number == 0:
        return "A"
    if number == 1:
        return "C"
    if number == 2:
        return "G"
    return "T"

def findingFrequentWordsBySorting(text, k):
    frequentPatterns = set()
    sortedIndex = []
    index = []
    count = []
    for i in range(len(text) - k +1):
        pattern = text[i:i+k]
        index.append(patternToNumber(pattern))
        count.append(1)
    sortedIndex = index[:]
    sortedIndex.sort()
    for j in range(1,len(text) - k+1):
        if sortedIndex[j] == sortedIndex[j - 1]:
            count[j] = count[j-1] + 1
    maxCount = max(count)
    for l in range(len(text) - k + 1):
        if count[l] == maxCount:
            pattern = numberToPattern(sortedIndex[l], k)
            frequentPatterns.add(pattern)
    return frequentPatterns

def clumpFinding(dna, k, t, L):
    frequentPatterns = set()
    clump = []
    frequencyArray = []
    for i in range(0, pow(4, k) - 1):
        clump.append(0)
    for j in range(len(dna) - L):
        text = dna[j:j+L]
        frequencyArray = computingFrequencies(text, k)
        for index in range(0, pow(4, k)-1):
            if frequencyArray[index] >= t:
                clump[index] = 1
    for l in range(0, pow(4, k)-1):
        print(l)
        if clump[l] == 1:
            pattern = numberToPattern(l, k)
            frequentPatterns.add(pattern)
    return frequentPatterns


dna = "GTGGCCCATTAGGATCATCATCAATGACCGGGCTAGACGTCTAAGGATAGGAGGCTCAGGTCTGCATGATCTTGATGCCTATCGGAAGACCCGTTATGGTCTTAGTTAGCTGGCGCCCTCCATGAGGCATGATCGCATAATAAAAGAATCGTATAGCACACAAGTATCGCTTTGTGAAGTCAAATGATTTCCAAGTGCATTCGAGGGAACGTTCGCACTTCCACATCAATACGGGTATTGCAACTAACTGAAACAAGGTCTAGTATCAGGGAATGCGATCATAAACGTCACCTCAAGTAAGGATGGCTTTATGGAATCGAGCAGCCCCCGCGGGTTCACGCTCATTGACTTATCCACCCTGGCGTACCTAACGGTCAGGCTGGGGGAACGCGCTACGAGAAAAAATGGATACTACCTACCCCCCCAGCCTAGGATTCTAATGAGCGTACCATACTCAGAAGCTTGTAATGTTGTCATCTCGGCTTATTGGTCAAGTTTCATGTGGTATCTTGTGTAGAAGGATACCCAGAAATCGATAGAAAAGTTACGGACTCAGCTATATAGAGGCCGAAGAGTCCAATTGTGCCCTTGGTCGTAAGCTACCAAAATTCCGTAATTCGTGGAGGCGTCGAACGACTGTATAACATGCATATCCGTCGAACGACTGCCGTCGAACGACCATTTATGGCCACGTCGAACGACATCTCATTACGACGTCGAACGACCACCGTCGTCGAACGACCGACGGAAGAGGATCTGTCGTCGAACGACGACGTCGACGTCCGTCGAACGACGTCGAACGACGTCGAACGACGTCGAACGACCGAACCGTCGCGTCGAACGACGTCGGCATACTAACGTCGCGTCGAACGACGTCGAACGACAAACTCGCGTCGAACGACCGTCGAACGACGGAAACCGTCGAACGACTTATCGTCGAACGACGTCGAACGACGCCTATCAGTCGTCGAACGTCGAACGACCGCGTCGACGTCGAACGACTCGAACGACAACGCAAGCGTTCTTGTTCGTGAGTCTGCTCTTTACGTCGAACGACTGTTTAGCCTATCTCATAGTCTGTCTCGTCGAACGACGTCGAACGACGTGACTAGGAGAAATCGCTGCAGTCTCCCAGCACTGGAGTCTTCCAAAACTTTAGGAGGTGAGGCGTCGAACGACTCAGAGATTACGTCGAACGACCGTCGAACGACGTGCTCAACGGTGAGCGTGGATATATAAACATGTTCTGGCCCTACATACAAGTCCCATTTCCGCCGCACCACGGCCCATAGTTCTCACACCGATATGCGCAGATCCCGTTTGTACAAAACAAGTTCGAGGACGCCGCCCCTGCATCTTGGGCAAAGCCAGACTTGGATTCTACCCTTTGGGTTAACTACGGCTTCCAACATGGCTATAAAAAATGACTCTTAAGGATGGCGTTTAAATCTGTTAATACGTACATTGCAACCTCCCCGTCCGGGGCACATTAAGAATTGTTCGATACGGTGCGATTAAGGCGTTGTCGTCCAAGTTTGGCACGTTACCGCTCTATGCCGCACCGTTGGATTGGTCTGATGCATTTGCCTTACCTTAACTCGAAGAGTGCGTAAGGGGCTGTATTTTCCGGGGAAGGCAGGTTTGTTTAATGTCGAGCGACACAATCTTTGACTTCAAGCTGACCACCAGTAGGATAGAAATCTTCTTAGATGCGAATTTAATTCGTCTCGGGATTCGACTCAACCACTCCACGTTTTAATCGCCTATGCTCCTTACGTTCATCTAGGATCTTGAGAAACGTTGCAGCCGGTCCCGGTAGAAGTATGTACACCGGTGCGTAAAAGTCCAGCGCATGCTATCAGCAATGTCCCGCCGGACCAGACAATTTTATCGCGACCAAAGGACCCATTTTACATTTTATAGAAAATCGATCGAAAAGACAATATCGAAAAGCATTTTATAGAGTTTGGCCACATTTTATAGAAAGCATTTTATAGAACAGGCTCATTCATTTTACATTTTATAGATATAGAAATCGAAAAGACCATTTTATAGACGAAAAGACGACATTTTATAGAATAGACTCGTCGCTTACCAACATTTTATAGACGCATTTTATAGATCGACGTCCCCTATCGAAAAGATCGAAAAGACCAAAGATCGACCATTTTATAGATAGCATCATTTTATAGAAGACCGGTCATTTTATAGAATCGAAAAGACGACCATTTTATAGATTATAGCATTTTATAGAACAAAAGCATTTTATAGAAGACCCATTTTATAGAATAGAAAAGCATTTTATAGACTAATCGATCGAAAAGACTCGAAAACATTTTATAGATATCGGCATTTTATAGATCGCCTTCATCGAAAAGACCATCGAAAAGACCCATTTTATAGATGATGTCAGATCGAAACATTTTATAGACCATTCCGACCGCTTTCGACCGCTTTTTTTATAGAGCATTTTATAGAAAACCATTTTATAGATAGACCCGACCGACCGCTTTTCTCGAAAACGACCGCTTTTACTATATCGACCGCTTTTATCAACCCGACCGCTTTTGAGCGACCGCTTTTTAGACCCGACCGCTTTTGTGTCGACCGCTTTTAGCCGGACGACCGCTTTTATCTCTTTACTTCCTCACATGTCTATGGCACCCGACCGCTTTTTCGATCCATGGGGCGACCGACCGCTTTTTTCGTAGTTCATATCTCTGCACGGGCGGGTCCCTAACAGCCGACCGCTTTTCGACCGCTTTTCCGCTTTTCGACCGCTTTTTGCATACTGCCCCTCCCTCCACGGAGAGCATCATGAAGACGACCGCTTTTGTCATACTGCCCCTCGGCGCTATACTGCCCCTTTCGACCGCTTCGACCGCTTTTTGCCCCGACCGCTTTTGCTTCGACCGCTTCGACCGCTTTTTGCCCCTGAAGGGATACGACCGCCGACCGACCGCTTTTTACTGCCCCCGACCGCGACCGCTTTTACCGCGACCGCTTTTACCGACCGCTTTTCTTATGATACTGCCCCTCATACTGCATACTGCCCCTCCCCTATACTGCCCCTGGTGGTTGAATACTGCCCCTATAATACTGCCCCTTGCGGCGTTTAGTTGAGATACTGCCCCTGAAGTTGAGGTTGAATACTGCCCCTTTGAGTCAATGTCAGTTGAGTCAATTGAGTCGTTGAGTCAATCATACTGCCCCTACTGTCAGTATACTGCCCCTGTCAATTCAATACTGTCGGCCCGAACAGGCAAATACTGCCCCTTGAGTCGTTGAGTCAATCAGGTCGTTGAGTTGAGTCAATACTGCCCCTTCATGGATACTGCCCCTTAATACTGCCCCTGTTGAGTCAATATCGGGTCCTTCTGGTACCGGCCTGACAAGTGAAGGTCCGACTGGTTGAGTGTTGAGTCAATTTGAGTGTTGAGTCAATTAGTTAGAGTTGATGTTGAGTCAATTAAGTTGAGTCAATAACCCTAGTACGAGTGGCTGACTGCTCGTTGAGTCAATTCTTACTAGCGTGTACCTTGATGTTGAGTCAATATCCTTAGGTACGATAAGGCTAGGCCTGCCTGTGCCCAACACCGCACGCGCCAGCGAGTAGTGTGCTGCTGGACCCTATTTGTACTATTAAAACCAGGACCAACGCTACGGTCTCGTCACCTCCAAGGAGGACGAACATACGGGGTACCACGGGTGCACCGCGCTAGGGAGGCAATGTGATCGGATGTTCATAAGCGCATCTGCCGGCGACAGATCTGTCGGCGGCTGCCAAGGAACCTTCTGCAATGAATTTGAGCCAACTGTACACACGTTAGCGCTAAGAAATAACGCCGGTCCTAAACGTTGTACTCCATAAGTTATGCTACGGCCTTAAGCGGCTGAAGAACCGTTGCATTTGTTCTGATAAGTCAGCCCTGCAGAAGCAGGAGCTGGAATTCAGCATCAATACACACTCTGAAATCGGAGTAGTTAGTGATTAATAACTATACCGGGCTTGTGCGCAATGGCTATTCCTACGACGGCCCACGTTAGCAGATACACCCCAATGTGTATTGGAGGTGACGGTTGTGTTCCAAGCGCGGAAGCTAAGCCTAAGCCCATAGCTTAAGCCCATAGGCATTATTGCACCTTGTGGACCGGCCCGTTAAGCCCATAAGCCCATAGCAGGGATTACTTCCCGATTGAATTAAGCCCATAGCGGAATAAGCCCATAGTGTAGAACATCCAGGAGAAGGGGTCTAAGCCCATAGGCCCATAGGTATAAGCCCATAGGCCCATAGATACCACTAAGCCCATAGCCCATAGGGACTTTAAGCCCATAGTGTTAAGCTAAGCCCATAGGGAGTTGGATCCTGATTTCTTAATAAGCCCATAGCGAAGAAATAGACTAAGCCCATAGCCATAAGCCCATAGAGTAAGCCCATAGGTTTAAGCCCATAGAGGTAGCTTGCGGATCACTATAAGCCCATAGGGGACGTAAGCCCATAGTAGGTAAGCCCATAGGGATTAAGCCCATAGAGATAAGCCCATAGGAAGAGACAACCGAGGTTCTGAGATACTTGGATGAGGCGTCGGAGTGGAAGCATCGGAGTGGAAGGGAAGAGTGGAAGACGGAGTGGAAGTAGGCCGGAGCGGAGTGGAAGAAGCCCACGGAGTGGAAGAGCCCACGGAGTGGAAGCGACCCAATCGGTACGTTCCCAGCCCTGAGGGTGCAACTCGGAGTGGAAGAGTACCAGCAGCGAGCACGGAGTGGAAGTCCCGGATTTCGCGGAGTGCGGAGTGGAAGTTCGGAGTCGGAGTGGAAGACGTCAACTAGTGCTTGTAAACGATCATGTATCCGGAGTGGAAGCAGCGCAAGGCCTTCGATTGCTGAGTTCGGAGTGCGGCGGAGTGGAAGGTGGAAGTCGGAGTGGAAGCTCGTCGGTTGCTAATCGGAGTGGAAGATTCTCTTCACCGTGGTATTCTAGTTCCGGTATCACCATTATAGCTTAGCGGCGGAGTGGAAGCGCGGAGTGGAAGTGGGGCGGAGTGGAAGAGTCAACGCGGAGTGGAAGCATCTGGGCGGAGTGGAAGACGGAGCGGAGTGGAAGCTACTTCACCATCTCCTTATATACCCGGAGTGGAACGGAGTGGAAGCATCTCCTTCTTCTACAATACCATCTCCTTCCAGTGTAGTAAGCCACAGAGCCGCTGACCATACCATCTCCTTGAAAATCGGTTCACGAATCACCTTGTGCCGATCGACCATACCATCTCCTTCGACCATCTCCTTCTCCTTCGTACTCTACCATCTCCTTTTCTGTTCATGAAGCATGGCAAGTCTTTTGTTATGTGTTGCTAGCCACCATCTCCTTCCTTTACCATCTCCTTATTAGGTTTCCGATCTGCTTTGAAACACGGACATGTCGCTACCATCTCACCATCTCCTTCACCATCTCCTTATCTCCTTTCCTTCCATCTACCATCTCCTTCGTGCTTACAATTAAACCATCTACCATCTCCTTACAAACCATCTCCTTAGCCTACGATCATCGCGAAGTCCATAACCATCTCCTTCGACCATCTCCTTAGATTCGAACCTTGGCAGCATACCATCTCCTTCTACTAGAGACCATCTCCTTATAACCATCTCCTTACAATAAGACCATCTCCTTCATCTCCACCATCTCCTTCCATCTCCTTGAGTGAAGTGAGGTAGAACAAACGCCGGGACCTTTCCGTATCCCGCTGCCCTTTAGTGGCTGTTCGTCGTCGATGTCTTTCCAACCCCTAATGCTTGTACTAAACGCATAAGCGCATTATCTGCCGTTCTTCGTCCACACCTACCGGCTCGCATAGCCTTTTATCATCATCACTCCCCGGGGCCACGAACCCACCATGTAACGGTAGTCAATGTGCCAATCTTCGAGTTTTGCCAAGTGAGTTACTGGTTTTCGAGATCGCGTCTTGGATAAGGCTTCTCTCTTCAATCGCTCCCAATGGCTGGGCAATGGCTGGGGACAGCAATGGCTGGGCGTGTAGTACCGCTCACCCGTAGTCCCGGTCCCCGACCAGTATAGCAATGGCTGGGGGCTGGGCCAATGGCTGGGAATGGCTGGGCTGTAAGGTAGCGCCAATGGCAACAATGGCTGGGGGGCATGCTAATAACATTAGAGATCAATGGCCAATGGCTGGGACAATGGCTGGGCCTGTAAACTAGCGATTCAATGGCTGGGCCGGCTAATTCCCAGCCCAATGGCTGGGTTCAATGGCTGGGTAGTACATTTAGGGCCTCAATGGCTGGGTGGCTGGGGGGAGTAGCCAATGGCTGGGAGGCTGTTACACAATGGCTGGGTCAATGGCTGGGGCTGGGATAGTGTGAGAACCCAATGCACAATGGCTGGGCTGCACTTCCGTCTTAAATAGTAGTCAACAATCAATGGCTGGGACAATGGCTGGGACTACGCAGTCGAGTTTACAATGGCCAATGGCTGGGCTGGGACCGTACAATGGCTGGGTAAACACGATGATGTCAACTCAAGGGCCGATGTATATGCAATCGCCCAACGCCCAATGAGGCGCCCAATCGCCCAATGAGTCATTTGGCACTGCTGAGACGGCAACTATAGGAGTTTTCCGCTGGCGGGTGGGGGACATGTGATGATCACGCCCGCCCAATGAGGAGGAGCCTCACGCGCCCAATGAGACGATTGGCCACGACCAGTTGTGTGGCATGAAGCGAGCATCTCTAGTGGCCGCCCAATGAGAATGAGATTTTCCGCCGCCCAATGAGCCCAATGAGACTGACTTCTTGGAGCGCCCAATGAGACGCCGCCCAATGAGTACTGACCGCCCAATGCGCCCAATGAGCGCCCAATGAGCCCAACATCAACGGGAAACGGGATACCCGCCCAATCATCAACGGGACGGGACGCCCAATGAGCCATCAACGGGACATCAACGGGACAACGGGATCATCAACGGGAAACATCAACGGGACGCCCAATGAGGTTGAATGTTTAAGTCATCAACGGGAGGCGCCCGCCCAATGAGACATCAACGGGAAACATCAACGGGACGCGCCCAATGAGCTTCGCCCAATGAGGAGGCCCAATGAGTTCGTGCTGCCAGTGTCCATCAACGGGATTGGTATAGCATCAACGGCATCAACGGGAGAGCGTCAAGATCATCAACCAACGTGCTTATCAACGCATCAACGGGAGACATCAACAACGTGCTTACTAAAGCACAACGTGCCAACGTGCTTACAACGTGCTTAGTCTCATCAACGGGATCAACAACGTGCTTATCAACGGGAGATGGACAACGTGCTTACAACCACAACGTGCTTAATCAACCATCAACGGGACAACGTGCTTCCAACGTGCTTAAACGCACAACGTGCTTAGGGATCATTCCCCGCAACGTGCTTACTTACGTGCTTCAACCAACGTGCTTAGGGAAACCCAACCAACGCAACGTGCTTAGACCGAGTCAGCAACGTGCTTATGCTCGTGCTCAACGTGCTTAACGTCAACGTGCTTATGTATTTAACATGCCTGCTAGTCCCAACGTGCTTAGGATGTGCCAACGTGCTTACGACAGACAACGTGCTTACGTCACTCGGGGCCATGCGTAGGGACACAACGTGCTTAGACAACGTGCTTAATTTCAACGTGCTTATAGTGCCCAACGTGCTTAGCCAACGTGCTTACCAAGTACCCTCCAACTGATTCACTCTGGTCGTGTTAATACAAATCTCTTGTATGTTTGTTCTGTCCAAGCTCAGCTTGCTCGTGATGATAAATTGGGGCCCTTTGAGAACTTGGGACGGGATGAACAACTTTGTTGTTTGGCATGCCCAGGTAATCTACAGACCTACAAGGAAATATGCTCTGCTTGTCAATCAATCAACGAATTACTGGAACGGGCGACTACGAGACAACTCCAGTGTGCACGGATGATGCACTCCACCGAAGCCTCGTTGACAAACTGAAAATTTCCCGGAGTCGTCATTACGATGTATCAGTGTCTTTGTTACTTTATTTGATGCGATCCCCAAGCACTACTATAAGTCAGGGGGTTGAGACTGG"
k = 11
t = 20
L = 495
c = clumpFinding(dna, k, t, L)
print(c)
